import { Keypair, Connection, PublicKey, LAMPORTS_PER_SOL, Transaction } from '@solana/web3.js';
import { useBotStore } from '@/lib/stores/botStore';
import bs58 from 'bs58';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let botInterval: NodeJS.Timeout | null = null;
let isActive = false;

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ç—å—é Solana
export const getConnection = (network: string) => {
  return new Connection(network);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
export const getKeypairFromPrivateKey = (privateKey: string) => {
  try {
    const decodedKey = bs58.decode(privateKey);
    return Keypair.fromSecretKey(decodedKey);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞');
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
export const getBalance = async (privateKey: string, network: string): Promise<number> => {
  try {
    const connection = getConnection(network);
    const keypair = getKeypairFromPrivateKey(privateKey);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    useBotStore.getState().setPublicKey(keypair.publicKey.toString());

    const balance = await connection.getBalance(keypair.publicKey);
    return balance / LAMPORTS_PER_SOL;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    throw error;
  }
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
export const startBot = (privateKey: string, network: string, snipeAmount: number) => {
  if (isActive) return;

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    getKeypairFromPrivateKey(privateKey);

    isActive = true;
    addLog('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    addLog(`–°–µ—Ç—å: ${network}`);
    addLog(`–°—É–º–º–∞ –¥–ª—è —Å–Ω–∞–π–ø–∞: ${snipeAmount} SOL`);

    // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    simulateNewToken();

  } catch (error) {
    addLog(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${error.message}`);
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  }
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
export const stopBot = () => {
  isActive = false;
  addLog('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

  if (botInterval) {
    clearTimeout(botInterval);
    botInterval = null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω–∞–π–ø–∞ —Ç–æ–∫–µ–Ω–∞
export const snipeToken = async (
  tokenMint: string,
  tokenSymbol: string,
  privateKey: string,
  network: string,
  amount: number
) => {
  try {
    addLog(`–°–Ω–∞–π–ø —Ç–æ–∫–µ–Ω–∞: ${tokenSymbol || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (${tokenMint.substring(0, 8)}...)`);

    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 1500));

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const txId = bs58.encode(Keypair.generate().publicKey.toBytes());
    addLog(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${txId.substring(0, 8)}...`);

    return { success: true, txId };
  } catch (error) {
    addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–Ω–∞–π–ø–∞: ${error.message}`);
    console.error('–û—à–∏–±–∫–∞ —Å–Ω–∞–π–ø–∞ —Ç–æ–∫–µ–Ω–∞:', error);
    throw error;
  }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
const addLog = (message: string) => {
  const timestamp = new Date().toLocaleTimeString();
  const logEntry = `[${timestamp}] ${message}`;

  const currentLogs = useBotStore.getState().logs;
  useBotStore.getState().setLogs([...currentLogs, logEntry]);

  console.log(logEntry);
};

// –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
const simulateNewToken = () => {
  if (!isActive) return;

  const randomAddress = Keypair.generate().publicKey.toString();
  const symbols = ['PEPE', 'DOGE', 'CAT', 'MOON', 'SUN', 'STAR', 'ROCKET'];
  const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];

  addLog(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ${randomSymbol} (${randomAddress.substring(0, 8)}...)`);

  // –°–Ω–∞–π–ø–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –±–æ—Ç –≤–∫–ª—é—á–µ–Ω
  const { privateKey, network, isRunning } = useBotStore.getState();
  const snipeAmount = 0.01; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

  if (isRunning && privateKey) {
    snipeToken(randomAddress, randomSymbol, privateKey, network, snipeAmount)
      .catch(error => console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–Ω–∞–π–ø–∞:', error));
  }

  // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
  const nextInterval = 5000 + Math.random() * 10000;
  botInterval = setTimeout(simulateNewToken, nextInterval);
};